/*
 *     Copyright (C) 2023  Intergral GmbH
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package com.intergral.deep.agent.api.plugin;

import java.util.Map;

/**
 * This type defines a processor for metrics. This type can be added to plugins to allow metric generated by tracepoints to be attached to
 * various metric engines.
 */
public interface IMetricProcessor {

  /**
   * Process a counter type metric.
   *
   * @param name      the name of the metric
   * @param labels      the labels attached to the metric
   * @param namespace the namespace the metric should be in
   * @param help      the help statement for the metric
   * @param unit      the unit for the metric
   * @param value     the value to post to the metric
   */
  void counter(final String name, final Map<String, Object> labels, final String namespace, final String help, final String unit,
      final Double value);

  /**
   * Process a gauge type metric.
   *
   * @param name      the name of the metric
   * @param labels      the labels attached to the metric
   * @param namespace the namespace the metric should be in
   * @param help      the help statement for the metric
   * @param unit      the unit for the metric
   * @param value     the value to post to the metric
   */
  void gauge(final String name, final Map<String, Object> labels, final String namespace, final String help, final String unit,
      final Double value);

  /**
   * Process a histogram type metric.
   *
   * @param name      the name of the metric
   * @param labels      the labels attached to the metric
   * @param namespace the namespace the metric should be in
   * @param help      the help statement for the metric
   * @param unit      the unit for the metric
   * @param value     the value to post to the metric
   */
  void histogram(final String name, final Map<String, Object> labels, final String namespace, final String help, final String unit,
      final Double value);

  /**
   * Process a summary type metric.
   *
   * @param name      the name of the metric
   * @param labels      the labels attached to the metric
   * @param namespace the namespace the metric should be in
   * @param help      the help statement for the metric
   * @param unit      the unit for the metric
   * @param value     the value to post to the metric
   */
  void summary(final String name, final Map<String, Object> labels, final String namespace, final String help, final String unit,
      final Double value);
}
